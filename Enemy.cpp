/*******************************************************************************
* タイトル:		エネミープログラム
* プログラム名:	Enemy.cpp
* 作成者:		GP11A132 17 鍾政殷
* 作成日:		2023/06/19
*******************************************************************************/



/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "Enemy.h"
#include "Player.h"
#include "Field.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/


/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/


/*******************************************************************************
* グローバル変数
*******************************************************************************/
ENEMY enemy[ENEMY_MAX];

/*******************************************************************************
 関数名:	
 引数　:	
 戻り値:	
 説明　:	
*******************************************************************************/
// エネミーの初期化
void InitEnemy(void) {
	enemy[0].x = 8;
	enemy[0].y = 8;

	enemy[1].x = 15;
	enemy[1].y = 10;

	enemy[2].x = 12;
	enemy[2].y = 9;
}
// エネミーの終了処理
void UninitEnemy(void) {

}
// エネミーの更新処理
void UpdateEnemy(void) {
	// 現在の座標を保存しておく エネミー.ver

	PLAYER* player = getPlayer();

	int rng = rand() % 3;

	for (int i = 0; i < ENEMY_MAX; i++) {
		enemy[i].ox = enemy[i].x;
		enemy[i].oy = enemy[i].y;
		if (rng == 0) {
			if (enemy[i].x - player->x >= 0) {
				enemy[i].x--;
			}
			else if (enemy[0].x - player->x < 0) {
				enemy[i].x++;
			}
		}
		else if (rng == 1) {
			if (enemy[i].y - player->y >= 0) {
				enemy[i].y--;
			}
			else {
				enemy[i].y++;
			}
		}
		else {
			enemy[i].y++;
		}
	}
	// 移動後の場所をチェックする　エネミー.ver
	for (int i = 0; i < ENEMY_MAX; i++) {
		switch (getFieldData(enemy->y, enemy->x)) {
		case 0:
			break;
		case 1:
			enemy[i].y = enemy[i].oy;
			enemy[i].x = enemy[i].ox;
			break;
		default:
			printf("$");
			break;
		}
	}
}
// エネミーの描画処理
void DrawEnemy(void) {
	printf("M");
}

ENEMY* getEnemy(void) {
	return enemy;
}







