/*******************************************************************************
* タイトル:		フィールドプログラム
* プログラム名:	Field.cpp
* 作成者:		GP11A132 17 鍾政殷
* 作成日:		2023/06/19
*******************************************************************************/



/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "Field.h"
#include "Player.h"
#include "Enemy.h"
#include "main.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/


/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/


/*******************************************************************************
* グローバル変数
*******************************************************************************/
ENTITY entity;


// 2Dフィールド　20ⅹ20
int field[HEIGHT][WIDTH] =
{ 
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 2, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 0, 1, 2, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
  1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
  1, 4, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  
};



/*******************************************************************************
 関数名:	
 引数　:	
 戻り値:	
 説明　:	
*******************************************************************************/

// フィールドの初期化処理
void InitField(void) {
	entity.X = 0; // 横軸
	entity.Y = 0; // 縦軸

	entity.key = 0;
	// プレイヤーの初期化
	InitPlayer();

	// エネミーの初期化
	InitEnemy();
	
}

// フィールドの終了処理
void UninitField(void) {
	UninitPlayer();
	UninitEnemy();
}

// フィールド表示処理
void DrawField(void) {
	PLAYER* player = getPlayer();
	ENEMY* enemy = getEnemy();

	// TODO: PVE Collision & Change State... FIELD -> BATTLE

	for (int y = player->y - uPOV; y < player->y + dPOV + entity.Y; y++) {
		// 1行表示
		for (int x = player->x - lPOV; x < player->x + rPOV + entity.X; x++) {
			if (y < 0 || y >= HEIGHT || x < 0 || x >= WIDTH) {
				printf("X");
			}
			// Y行目のX列目がプレイヤーの座標と一致したら
			else if (x == player->x && y == player->y) {
				// Pを表示
				DrawPlayer();
				
			}
			else if ((x == enemy->x && y == enemy->y))
			{
				DrawEnemy();
			}
			else {
				// 配列の中身にしたがって表示する
				switch (field[y][x]) {
				case 0: // 通れる
					printf(" ");
					break;
				case 1: // 障害物
					printf("#");
					break;
				case 2: // ライド
					printf("T");
					break;
				case 3: // キー
					printf("K");
					break;
				case 4: // ドア
					printf("D");
					break;
				default: // エラー検知
					printf("$");
					break;
				}
			}
		}
		printf("\n"); // 次の行へ改行する
	}

	printf("\n\n　#: 壁	\n　T: ライド\n　K: 鍵\n　D: 鍵がかかった扉\n　O: 不安定な魔法陣\n\n\tKey:\t %d\n\t%s\tHP: %d",entity.key,player[0].name, player[0].HP);

	switch(player[0].log)
	{
		case ERROR_NO:
			break;
		case ERROR_KEY:
			printf("\n鍵が掛かっている、どこに鍵があるはず、、、\n");
			Sleep(2500);
			player[0].log = ERROR_NO;
			break;
	}
	
	Sleep(100);
}

// 指定されたXY座標を返す
int getFieldData(int y, int x) {
	return field[y][x];
}
void setFieldData(int y, int x, int num)
{
	field[y][x] = num;
}


ENTITY* getLigth()
{
	return &entity;
}


